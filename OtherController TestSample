package controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import javax.transaction.Transactional;

import org.json.JSONObject;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.WebApplicationContext;

import com.tii.nlp.TestNlpServiceAppContext;
import com.tii.nlp.entity.CustomNerTrainingData;
import com.tii.nlp.ner.NERType;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = TestNlpServiceAppContext.class)
@Transactional
@Ignore
public class NLPControllerTest {
	
	protected MockMvc mvc;
	
	static {
        System.setProperty("eureka.client.enabled", "false");
    }
	
	@Autowired
    private RestTemplate mockRestTemplate;
	
	@Autowired
	protected WebApplicationContext context;
	
//	private MockRestServiceServer mockServer;
	public void before() throws Exception {
//		 mockServer = MockRestServiceServer.createServer(mockRestTemplate);
		 mvc = MockMvcBuilders.webAppContextSetup(context).build();

	 }
    
    /**
	 *
	 * @param uri
	 * @return
	 */
	protected MockHttpServletRequestBuilder buildRequest(RequestMethod method, String uri) {

		MockHttpServletRequestBuilder builder;

		switch (method){
			case DELETE:
				builder = MockMvcRequestBuilders
						.delete(uri);
				break;
			case POST:
				builder = MockMvcRequestBuilders
						.post(uri);
				break;
			case PUT:
				builder = MockMvcRequestBuilders
						.put(uri);
				break;
			default:// GET falls into here
				builder = MockMvcRequestBuilders
						.get(uri);
		}

		MockHttpServletRequestBuilder requestBuilder = builder;

		return requestBuilder;
	}
    
    
    @Test
    public void testCreateNamedEntityReference() throws Exception{
    	CustomNerTrainingData nerData = new CustomNerTrainingData();
    	nerData.setId(1L);
    	nerData.setCampaignId(10525L);
    	nerData.setLabel(NERType.UNKNOWN);
    	nerData.setLocale("EN");
    	nerData.setNamedEntity("Amrendra");
    	
    	 JSONObject json = new JSONObject(nerData);
    	
    	String url = "/nereference";
        MockHttpServletRequestBuilder postRequest = buildRequest(RequestMethod.POST, url).content(json.toString())
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);

        String postResult = mvc.perform(postRequest).andExpect(status().isOk()).andReturn().getResponse()
                .getContentAsString();

        JSONObject responseJson = new JSONObject(postResult).getJSONObject("payload");
        
        Assert.isTrue(nerData.getId().equals(responseJson.getLong("id")));
        Assert.isTrue(responseJson.getString("locale").equals("EN"));

        String confirmationMsg = new JSONObject(postResult).getString("message");
        Assert.isTrue(confirmationMsg.equals("Named Entity Reference created successfully"));
    	
    }
    
    

}
